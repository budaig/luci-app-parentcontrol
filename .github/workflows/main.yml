name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  release:
    name: Build and Release for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64_cortex-a53
          - aarch64_cortex-a72
          - aarch64_generic
          - arm_cortex-a5_vfpv4
          - arm_cortex-a7
          - arm_cortex-a7_neon-vfpv4
          - arm_cortex-a8_vfpv3
          - arm_cortex-a9
          - arm_cortex-a9_neon
        sdk:
          - openwrt-22.03

    env:
      PACKAGE_NAME: luci-app-parentcontrol
      SDK_URL_PATH: ${{ matrix.sdk_url_path }}
      SDK_NAME: ${{ matrix.sdk_name }}
      ARCH: ${{ matrix.arch }}
      CACHE_DIR: ~/cache

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -yq gettext libncurses5-dev rsync xsltproc wget file zstd

      - name: Create Directories
        run: |
          echo "SDK_HOME=$(mktemp -d)" >> $GITHUB_ENV
          echo "SDK_DL_DIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: Prepare Build Environment
        run: |
          source $GITHUB_ENV
          cd "$SDK_DL_DIR"
          if ! ( wget -q -O - "$SDK_URL_PATH/sha256sums" | grep -- "$SDK_NAME" > sha256sums.small 2>/dev/null ) ; then
            echo "Cannot find ${SDK_NAME} file in sha256sums."
            exit 1
          fi
          SDK_FILE="$(awk '{print $2}' sha256sums.small | sed 's/*//g')"
          wget -q -O "$SDK_DL_DIR/$SDK_FILE" "$SDK_URL_PATH/$SDK_FILE"
          echo "Downloaded file type:"
          file "$SDK_DL_DIR/$SDK_FILE"
          if ! sha256sum -c sha256sums.small >/dev/null 2>&1 ; then
            echo "SDK cannot be verified!"
            exit 1
          fi
          unzstd "$SDK_DL_DIR/$SDK_FILE" -o "${SDK_FILE%.zst}.tar"
          tar -xf "${SDK_FILE%.zst}.tar" -C "$SDK_HOME" --strip=1 || { echo "Failed to extract SDK"; exit 1; }

      - name: Create Release Tag
        if: github.event_name == 'push' && github.ref_type == 'tag'
        run: git tag ${{ github.ref }}
      
      - name: Build Packages
        run: |
          source $GITHUB_ENV
          cd "$SDK_HOME"
          ./scripts/feeds update -a > /dev/null 2>&1
          ./scripts/feeds install -a > /dev/null 2>&1
          cp -r "${GITHUB_WORKSPACE}" "package/$PACKAGE_NAME"
          make defconfig > /dev/null 2>&1
          make package/${PACKAGE_NAME}/{clean,download,compile} V=s
          find "$SDK_HOME/bin" -type f -name "${PACKAGE_NAME}_*.ipk" \
           -exec cp -f {} "${GITHUB_WORKSPACE}" \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.arch }}
          path: bin/packages/${{ matrix.arch }}/packages_ci/*.ipk

      - name: Upload packages
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          replacesArtifacts: true
          artifacts: "bin/packages/${{ matrix.arch }}/packages_ci/*.ipk"

      - name: Clean up
        run: |
          rm -rf "$SDK_HOME"
          rm -rf "$SDK_DL_DIR"
